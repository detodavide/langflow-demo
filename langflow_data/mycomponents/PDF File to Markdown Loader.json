{"data":{"edges":[],"nodes":[{"data":{"id":"CustomComponent-FGF2T","type":"CustomComponent","node":{"template":{"parsing_prompt":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"hey","fileTypes":[],"file_path":"","password":false,"name":"parsing_prompt","display_name":"Parsing Prompt","advanced":false,"dynamic":false,"info":"Instruction for parsing the PDF file.","load_from_db":false,"title_case":false,"input_types":["Text"]},"path":{"type":"file","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[".pdf"],"file_path":"8a3e09ec-9617-40da-a0df-5882c9545a6e/uber_10q_march_2022.pdf","password":false,"name":"path","display_name":"Path","advanced":false,"dynamic":false,"info":"Supported file types: pdf","load_from_db":false,"title_case":false,"value":"uber_10q_march_2022.pdf"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\nfrom typing import Any, Dict, Optional\nimport os\nfrom llama_parse import LlamaParse\nfrom langflow.custom import CustomComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema import Record\nfrom langflow.base.data.utils import parse_text_file_to_record\n\nclass PDFToMarkdownComponent(CustomComponent):\n    display_name = \"PDF to Markdown\"\n    description = \"A component to load a PDF file, convert it to Markdown using LlamaParse, and return a Record.\"\n    icon = \"file-pdf\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"llama_parse_api_key\": {\n                \"display_name\": \"Llama Parse API Key\",\n                \"info\": \"API key for the LLama Parse API.\",\n                \"password\": True,\n            },\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": [\"pdf\"],\n                \"info\": \"Supported file types: pdf\",\n            },\n            \"parsing_prompt\": {\n                \"display_name\": \"Parsing Prompt\",\n                \"field_type\": \"Text\",\n                \"info\": \"Instruction for parsing the PDF file.\"\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def convert_pdf_to_markdown(\n        self,\n        llama_parse_api_key: str,\n        pdf_path: str, \n        parsing_prompt: Optional[str] = None, \n        silent_errors: bool = False\n    ) -> str:\n        try:\n            # Initialize LlamaParse\n            parser = LlamaParse(api_key=llama_parse_api_key, result_type=\"markdown\", parsing_instruction=parsing_prompt)\n            # Load data from the PDF file\n            parsed_documents = parser.load_data(pdf_path)\n            # Extract the content from the list of Document objects and join them into a single string\n            parsed_content = \"\\n\".join(doc.text for doc in parsed_documents)\n            return parsed_content\n        except Exception as e:\n            if not silent_errors:\n                raise e\n            return \"\"\n\n    def load_file(self, llama_parse_api_key: str, path: str, parsing_prompt: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        parsed_content = self.convert_pdf_to_markdown(llama_parse_api_key, str(resolved_path), parsing_prompt, silent_errors)\n        \n        # Create a Record directly from the parsed content\n        record = Record(text=parsed_content, file_path=resolved_path)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        llama_parse_api_key: str,\n        path: str,\n        parsing_prompt: str = \"\",\n        silent_errors: bool = False,\n    ) -> Record:\n        return self.load_file(llama_parse_api_key, path, parsing_prompt, silent_errors)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"llama_parse_api_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"llama_parse_api_key","display_name":"Llama Parse API Key","advanced":false,"dynamic":false,"info":"API key for the LLama Parse API.","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"llx-5RZsrlozj1YAswv061rjtyFQ0wcCjE2plx28cXdJNwnByIWj"},"silent_errors":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"silent_errors","display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","load_from_db":false,"title_case":false},"_type":"CustomComponent"},"description":"A component to load a PDF file, convert it to Markdown using LlamaParse, and return a Record.","icon":"file-pdf","base_classes":["Record"],"display_name":"PDF File to Markdown Loader","documentation":"","custom_fields":{"llama_parse_api_key":null,"path":null,"parsing_prompt":null,"silent_errors":null},"output_types":["Record"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"edited":true,"official":false}},"id":"CustomComponent-FGF2T","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"A component to load a PDF file, convert it to Markdown using LlamaParse, and return a Record.","name":"PDF File to Markdown Loader","id":"CustomComponent-FGF2T","is_component":true,"last_tested_version":"1.0.0a61"}