{"id":"8a3e09ec-9617-40da-a0df-5882c9545a6e","data":{"nodes":[{"id":"TextOutput-JDAXF","type":"genericNode","position":{"x":489.4636196592994,"y":1038.7440007323557},"data":{"id":"TextOutput-JDAXF","node":{"template":{"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Text","advanced":false,"input_types":["Record","Text"],"dynamic":false,"info":"Text or Record to be passed as output.","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"record_template":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"{text}","fileTypes":[],"file_path":"","password":false,"name":"record_template","display_name":"Record Template","advanced":true,"dynamic":false,"info":"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Display a text output in the Playground.","icon":"type","base_classes":["object","str","Text"],"display_name":"Extracted Chunks","documentation":"","custom_fields":{"input_value":null,"record_template":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"edited":true},"type":"TextOutput","description":"Display a text output in the Playground.","display_name":"Extracted Chunks","edited":false},"selected":true,"width":384,"height":297,"dragging":false},{"id":"Prompt-wiGsr","type":"genericNode","position":{"x":1019.3698086686697,"y":539.9101200983648},"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-wiGsr","node":{"template":{"_type":"CustomComponent","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import CustomComponent\nfrom langflow.field_typing import TemplateField\nfrom langflow.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Document","Message","Record","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"question":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"question","display_name":"question","advanced":false,"input_types":["Document","Message","Record","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"template":{"advanced":false,"display_name":"Template","dynamic":false,"fileTypes":[],"file_path":"","info":"","input_types":["Text"],"list":false,"load_from_db":false,"multiline":false,"name":"template","password":false,"placeholder":"","required":false,"show":true,"title_case":false,"type":"prompt","value":"Use the following pieces of information to answer the user's question.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n\nContext: {context}\n\nQuestion: {question}\n\nOnly return the helpful answer below and nothing else.\nHelpful answer:"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["object","str","Text"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","question"]},"output_types":["Prompt"],"full_path":null,"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"error":null},"type":"Prompt"},"selected":false,"width":384,"height":513,"dragging":false},{"id":"ChatOutput-4LUD2","type":"genericNode","position":{"x":2047.3155695750686,"y":706.4931097494446},"data":{"id":"ChatOutput-4LUD2","node":{"base_classes":["object","Text","Record","str"],"beta":false,"custom_fields":{"input_value":null,"record_template":null,"return_record":null,"sender":null,"sender_name":null,"session_id":null},"description":"Display a chat message in the Playground.","display_name":"Chat Output","documentation":"","field_formatters":{},"field_order":[],"frozen":false,"icon":"ChatOutput","output_types":["Message","Text"],"template":{"_type":"CustomComponent","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, Union\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"advanced":false,"display_name":"Text","dynamic":false,"fileTypes":[],"file_path":"","info":"","input_types":["Text"],"list":false,"load_from_db":false,"multiline":true,"name":"input_value","password":false,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str"},"sender":{"advanced":true,"display_name":"Sender Type","dynamic":false,"fileTypes":[],"file_path":"","info":"","input_types":["Text"],"list":true,"load_from_db":false,"multiline":false,"name":"sender","options":["Machine","User"],"password":false,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":"Machine"},"sender_name":{"advanced":false,"display_name":"Sender Name","dynamic":false,"fileTypes":[],"file_path":"","info":"","input_types":["Text"],"list":false,"load_from_db":false,"multiline":false,"name":"sender_name","password":false,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":"AI"},"session_id":{"advanced":true,"display_name":"Session ID","dynamic":false,"fileTypes":[],"file_path":"","info":"If provided, the message will be stored in the memory.","input_types":["Text"],"list":false,"load_from_db":false,"multiline":false,"name":"session_id","password":false,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str"}}},"type":"ChatOutput"},"selected":false,"width":384,"height":391},{"id":"RecursiveCharacterTextSplitter-nsByy","type":"genericNode","position":{"x":947.7443449390992,"y":1577.594510510623},"data":{"id":"RecursiveCharacterTextSplitter-nsByy","node":{"base_classes":["Record"],"beta":false,"custom_fields":{"chunk_overlap":null,"chunk_size":null,"inputs":null,"separators":null},"description":"Split text into chunks of a specified length.","display_name":"Recursive Character Text Splitter","documentation":"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter","field_formatters":{},"field_order":[],"frozen":false,"output_types":["Record"],"template":{"_type":"CustomComponent","chunk_overlap":{"advanced":false,"display_name":"Chunk Overlap","dynamic":false,"fileTypes":[],"file_path":"","info":"The amount of overlap between chunks.","list":false,"load_from_db":false,"multiline":false,"name":"chunk_overlap","password":false,"placeholder":"","required":false,"show":true,"title_case":false,"type":"int","value":"100"},"chunk_size":{"advanced":false,"display_name":"Chunk Size","dynamic":false,"fileTypes":[],"file_path":"","info":"The maximum length of each chunk.","list":false,"load_from_db":false,"multiline":false,"name":"chunk_size","password":false,"placeholder":"","required":false,"show":true,"title_case":false,"type":"int","value":"2000"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langchain_core.documents import Document\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\nfrom langflow.custom import CustomComponent\nfrom langflow.schema import Record\nfrom langflow.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"inputs":{"advanced":false,"display_name":"Input","dynamic":false,"fileTypes":[],"file_path":"","info":"The texts to split.","input_types":["Document","Record"],"list":true,"load_from_db":false,"multiline":false,"name":"inputs","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"Document"},"separators":{"advanced":false,"display_name":"Separators","dynamic":false,"fileTypes":[],"file_path":"","info":"The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].","input_types":["Text"],"list":true,"load_from_db":false,"multiline":false,"name":"separators","password":false,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":[""]}}},"type":"RecursiveCharacterTextSplitter"},"selected":false,"width":384,"height":509},{"id":"pgvector-lhbev","type":"genericNode","position":{"x":1553.5782690221893,"y":1775.4000545913414},"data":{"type":"pgvector","node":{"template":{"embedding":{"type":"Embeddings","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"inputs":{"type":"Record","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"inputs","display_name":"Input","advanced":false,"input_types":["Document","Record"],"dynamic":false,"info":"","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, Union\n\nfrom langchain_community.vectorstores.pgvector import PGVector\nfrom langchain_core.embeddings import Embeddings\nfrom langchain_core.retrievers import BaseRetriever\nfrom langchain_core.vectorstores import VectorStore\n\nfrom langflow.custom import CustomComponent\nfrom langflow.schema import Record\n\n\nclass PGVectorComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using PostgreSQL.\n    \"\"\"\n\n    display_name: str = \"PGVector\"\n    description: str = \"Implementation of Vector Store using PostgreSQL\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/pgvector\"\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"code\": {\"show\": False},\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"pg_server_url\": {\n                \"display_name\": \"PostgreSQL Server Connection String\",\n                \"advanced\": False,\n            },\n            \"collection_name\": {\"display_name\": \"Table\", \"advanced\": False},\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        pg_server_url: str,\n        collection_name: str,\n        inputs: Optional[Record] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - embedding (Embeddings): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - collection_name (str): The name of the PG table.\n        - pg_server_url (str): The URL for the PG server.\n\n        Returns:\n        - VectorStore: The Vector Store object.\n        \"\"\"\n\n        documents = []\n        for _input in inputs or []:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        try:\n            if documents is None:\n                vector_store = PGVector.from_existing_index(\n                    embedding=embedding,\n                    collection_name=collection_name,\n                    connection_string=pg_server_url,\n                )\n            else:\n                vector_store = PGVector.from_documents(\n                    embedding=embedding,\n                    documents=documents,  # type: ignore\n                    collection_name=collection_name,\n                    connection_string=pg_server_url,\n                )\n        except Exception as e:\n            raise RuntimeError(f\"Failed to build PGVector: {e}\")\n        return vector_store\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"collection_name":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"collection_name","display_name":"Table","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"uber_10k"},"pg_server_url":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"pg_server_url","display_name":"PostgreSQL Server Connection String","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"postgresql+psycopg2://myuser:mypassword@vector_db:5432/mydatabase2"},"_type":"CustomComponent"},"description":"Implementation of Vector Store using PostgreSQL","base_classes":["BaseRetriever","Generic","object","Runnable","RunnableSerializable","Serializable","VectorStore"],"display_name":"PGVector","documentation":"https://python.langchain.com/docs/integrations/vectorstores/pgvector","custom_fields":{"embedding":null,"pg_server_url":null,"collection_name":null,"inputs":null},"output_types":["VectorStore","BaseRetriever"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"pgvector-lhbev"},"selected":false,"width":384,"height":515},{"id":"pgvectorSearch-RsuoZ","type":"genericNode","position":{"x":-72.7044889590386,"y":976.5552902662171},"data":{"type":"pgvectorSearch","node":{"template":{"embedding":{"type":"Embeddings","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"input_value":{"type":"Message","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Input","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List\n\nfrom langchain_core.embeddings import Embeddings\n\nfrom langflow.components.vectorstores.base.model import LCVectorStoreComponent\nfrom langflow.components.vectorstores.pgvector import PGVectorComponent\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import Text\nfrom langflow.schema import Record\n\n\nclass PGVectorSearchComponent(PGVectorComponent, LCVectorStoreComponent):\n    display_name: str = \"PGVector Search\"\n    description: str = \"Search a PGVector Store for similar documents.\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/pgvector\"\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"code\": {\"show\": False},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"search_type\": {\n                \"display_name\": \"Search Type\",\n                \"options\": [\"Similarity\", \"MMR\"],\n            },\n            \"pg_server_url\": {\n                \"display_name\": \"PostgreSQL Server Connection String\",\n                \"advanced\": False,\n            },\n            \"collection_name\": {\"display_name\": \"Table\", \"advanced\": False},\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"number_of_results\": {\n                \"display_name\": \"Number of Results\",\n                \"info\": \"Number of results to return.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(  # type: ignore[override]\n        self,\n        input_value: Message,\n        embedding: Embeddings,\n        search_type: str,\n        pg_server_url: str,\n        collection_name: str,\n        number_of_results: int = 4,\n    ) -> List[Record]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - input_value (str): The input value to search for.\n        - embedding (Embeddings): The embeddings to use for the Vector Store.\n        - collection_name (str): The name of the PG table.\n        - pg_server_url (str): The URL for the PG server.\n\n        Returns:\n        - VectorStore: The Vector Store object.\n        \"\"\"\n        try:\n            vector_store = super().build(\n                embedding=embedding,\n                pg_server_url=pg_server_url,\n                collection_name=collection_name,\n            )\n        except Exception as e:\n            raise RuntimeError(f\"Failed to build PGVector: {e}\")\n        return self.search_with_vector_store(\n            input_value=input_value.text, search_type=search_type, vector_store=vector_store, k=number_of_results\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"collection_name":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"collection_name","display_name":"Table","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"uber_10k"},"number_of_results":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":4,"fileTypes":[],"file_path":"","password":false,"name":"number_of_results","display_name":"Number of Results","advanced":true,"dynamic":false,"info":"Number of results to return.","load_from_db":false,"title_case":false},"pg_server_url":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"pg_server_url","display_name":"PostgreSQL Server Connection String","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"postgresql+psycopg2://myuser:mypassword@vector_db:5432/mydatabase2"},"search_type":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"options":["Similarity","MMR"],"name":"search_type","display_name":"Search Type","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"Similarity"},"_type":"CustomComponent"},"description":"Search a PGVector Store for similar documents.","base_classes":["Record"],"display_name":"PGVector Search","documentation":"https://python.langchain.com/docs/integrations/vectorstores/pgvector","custom_fields":{"input_value":null,"embedding":null,"search_type":null,"pg_server_url":null,"collection_name":null,"number_of_results":null},"output_types":["Record"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"edited":true},"id":"pgvectorSearch-RsuoZ","description":"Search a PGVector Store for similar documents.","display_name":"PGVector Search"},"selected":false,"width":384,"height":581},{"id":"ChatInput-IeuUX","type":"genericNode","position":{"x":-617.1470155691771,"y":465.0929082095633},"data":{"type":"ChatInput","node":{"template":{"files":{"type":"file","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[".txt",".md",".mdx",".csv",".json",".yaml",".yml",".xml",".html",".htm",".pdf",".docx",".py",".sh",".sql",".js",".ts",".tsx",".jpg",".jpeg",".png",".bmp"],"file_path":"","password":false,"name":"files","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","load_from_db":false,"title_case":false,"value":""},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n        build_config[\"return_message\"] = {\n            \"display_name\": \"Return Record\",\n            \"advanced\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = True,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Text","advanced":false,"input_types":[],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"value":"What is the Cash flows from operating activities associated with bad expense specified in the document ?"},"return_message":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"return_message","display_name":"Return Record","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"sender":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"User","fileTypes":[],"file_path":"","password":false,"options":["Machine","User"],"name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"sender_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"User","fileTypes":[],"file_path":"","password":false,"name":"sender_name","display_name":"Sender Name","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"session_id":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"session_id","display_name":"Session ID","advanced":true,"dynamic":false,"info":"If provided, the message will be stored in the memory.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Get chat inputs from the Playground.","icon":"ChatInput","base_classes":["Message","object","str","Text"],"display_name":"Chat Input","documentation":"","custom_fields":{"sender":null,"sender_name":null,"input_value":null,"files":null,"session_id":null,"return_message":null},"output_types":["Message","Text"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"ChatInput-IeuUX"},"selected":false,"width":384,"height":297},{"id":"CustomComponent-UGPy7","type":"genericNode","position":{"x":946.6164894976878,"y":2197.2027619673754},"data":{"type":"CustomComponent","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Dict, Optional\n\nfrom langchain_community.embeddings.fastembed import FastEmbedEmbeddings\n\nfrom langflow.custom import CustomComponent\n\n\nclass FastEmbedEmbeddingsComponent(CustomComponent):\n    display_name = \"FastEmbed Embeddings\"\n    description = \"Generate embeddings using FastEmbed models.\"\n    documentation = (\n        \"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/fastembed\"\n    )\n    icon = \"FastEmbed\"\n\n    def build_config(self):\n        return {\n            \"model_name\": {\"display_name\": \"Model Name\"}\n        }\n\n    def build(\n        self,\n        model_name: str = \"BAAI/bge-base-en-v1.5\"\n    ) -> FastEmbedEmbeddings:\n        return FastEmbedEmbeddings(\n            model_name=model_name,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"model_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"BAAI/bge-base-en-v1.5","fileTypes":[],"file_path":"","password":false,"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Generate embeddings using FastEmbed models.","icon":"FastEmbed","base_classes":["Embeddings","FastEmbedEmbeddings"],"display_name":"FastEmbeddings","documentation":"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/fastembed","custom_fields":{"model_name":null},"output_types":["FastEmbedEmbeddings"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"edited":true},"id":"CustomComponent-UGPy7","description":"Generate embeddings using FastEmbed models.","display_name":"FastEmbeddings"},"selected":false,"width":384,"height":325,"dragging":false,"positionAbsolute":{"x":946.6164894976878,"y":2197.2027619673754}},{"id":"File-lxT5W","type":"genericNode","position":{"x":369.53181592281373,"y":1924.0635096138678},"data":{"type":"File","node":{"template":{"path":{"type":"file","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[".txt",".md",".mdx",".csv",".json",".yaml",".yml",".xml",".html",".htm",".pdf",".docx",".py",".sh",".sql",".js",".ts",".tsx"],"file_path":"8a3e09ec-9617-40da-a0df-5882c9545a6e/uber_10q_march_2022.md","password":false,"name":"path","display_name":"Path","advanced":false,"dynamic":false,"info":"Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx","load_from_db":false,"title_case":false,"value":""},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\nfrom typing import Any, Dict\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom langchain_community.document_loaders import UnstructuredMarkdownLoader\nfrom langflow.custom import CustomComponent\nfrom langflow.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        if extension == \"md\":\n            # Use UnstructuredMarkdownLoader for markdown files\n            loader = UnstructuredMarkdownLoader(resolved_path)\n            record = loader.load()\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"silent_errors":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"silent_errors","display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","load_from_db":false,"title_case":false},"_type":"CustomComponent"},"description":"A generic file loader.","icon":"file-text","base_classes":["Record"],"display_name":"FileWithUnstructMD","documentation":"","custom_fields":{"path":null,"silent_errors":null},"output_types":["Record"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"edited":true},"id":"File-lxT5W","description":"A generic file loader.","display_name":"File"},"selected":false,"width":384,"height":289,"dragging":false},{"id":"CustomComponent-TXn1o","type":"genericNode","position":{"x":-646.3467796928169,"y":1121.9109968825685},"data":{"type":"CustomComponent","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Dict, Optional\n\nfrom langchain_community.embeddings.fastembed import FastEmbedEmbeddings\n\nfrom langflow.custom import CustomComponent\n\n\nclass FastEmbedEmbeddingsComponent(CustomComponent):\n    display_name = \"FastEmbed Embeddings\"\n    description = \"Generate embeddings using FastEmbed models.\"\n    documentation = (\n        \"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/fastembed\"\n    )\n    icon = \"FastEmbed\"\n\n    def build_config(self):\n        return {\n            \"model_name\": {\"display_name\": \"Model Name\"}\n        }\n\n    def build(\n        self,\n        model_name: str = \"BAAI/bge-base-en-v1.5\"\n    ) -> FastEmbedEmbeddings:\n        return FastEmbedEmbeddings(\n            model_name=model_name,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"model_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"BAAI/bge-base-en-v1.5","fileTypes":[],"file_path":"","password":false,"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Generate embeddings using FastEmbed models.","icon":"FastEmbed","base_classes":["Embeddings","FastEmbedEmbeddings"],"display_name":"FastEmbeddings","documentation":"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/fastembed","custom_fields":{"model_name":null},"output_types":["FastEmbedEmbeddings"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"edited":true},"id":"CustomComponent-TXn1o","description":"Generate embeddings using FastEmbed models.","display_name":"FastEmbeddings"},"selected":false,"width":384,"height":325,"positionAbsolute":{"x":-646.3467796928169,"y":1121.9109968825685},"dragging":false},{"id":"GroqModel-bUBCh","type":"genericNode","position":{"x":1557.5852825091665,"y":584.8478939528846},"data":{"type":"GroqModel","node":{"template":{"input_value":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Input","advanced":false,"dynamic":false,"info":"The input to the model.","load_from_db":false,"title_case":false,"input_types":["Text"]},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langchain_groq import ChatGroq\nfrom langflow.base.models.groq_constants import MODEL_NAMES\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import Text\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n\n    field_order = [\n        \"groq_api_key\",\n        \"model\",\n        \"max_output_tokens\",\n        \"temperature\",\n        \"top_k\",\n        \"top_p\",\n        \"n\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"groq_api_key\": {\n                \"display_name\": \"Groq API Key\",\n                \"info\": \"API key for the Groq API.\",\n                \"password\": True,\n            },\n            \"groq_api_base\": {\n                \"display_name\": \"Groq API Base\",\n                \"info\": \"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n                \"advanced\": True,\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Output Tokens\",\n                \"info\": \"The maximum number of tokens to generate.\",\n                \"advanced\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"info\": \"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            },\n            \"n\": {\n                \"display_name\": \"N\",\n                \"info\": \"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model\",\n                \"info\": \"The name of the model to use. Supported examples: gemini-pro\",\n                \"options\": MODEL_NAMES,\n            },\n            \"input_value\": {\"display_name\": \"Input\", \"info\": \"The input to the model.\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        groq_api_key: str,\n        model_name: str,\n        input_value: Text,\n        groq_api_base: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: float = 0.1,\n        n: Optional[int] = 1,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        output = ChatGroq(\n            model_name=model_name,\n            max_tokens=max_tokens or None,  # type: ignore\n            temperature=temperature,\n            groq_api_base=groq_api_base,\n            n=n or 1,\n            groq_api_key=SecretStr(groq_api_key),\n            streaming=stream,\n        )\n        return self.get_chat_result(output, stream, input_value, system_message)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"groq_api_base":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"groq_api_base","display_name":"Groq API Base","advanced":true,"dynamic":false,"info":"Base URL path for API requests, leave blank if not using a proxy or service emulator.","load_from_db":false,"title_case":false,"input_types":["Text"]},"groq_api_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"groq_api_key","display_name":"Groq API Key","advanced":false,"dynamic":false,"info":"API key for the Groq API.","load_from_db":true,"title_case":false,"input_types":["Text"],"value":""},"max_tokens":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"max_tokens","display_name":"Max Output Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate.","load_from_db":false,"title_case":false},"model_name":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"options":["llama3-8b-8192","llama3-70b-8192","mixtral-8x7b-32768","gemma-7b-it"],"name":"model_name","display_name":"Model","advanced":false,"dynamic":false,"info":"The name of the model to use. Supported examples: gemini-pro","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"llama3-70b-8192"},"n":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":1,"fileTypes":[],"file_path":"","password":false,"name":"n","display_name":"N","advanced":true,"dynamic":false,"info":"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.","load_from_db":false,"title_case":false},"stream":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","load_from_db":false,"title_case":false},"system_message":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"system_message","display_name":"System Message","advanced":true,"dynamic":false,"info":"System message to pass to the model.","load_from_db":false,"title_case":false,"input_types":["Text"]},"temperature":{"type":"float","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"0.0","fileTypes":[],"file_path":"","password":false,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].","rangeSpec":{"step_type":"float","min":-1,"max":1,"step":0.1},"load_from_db":false,"title_case":false},"_type":"CustomComponent"},"description":"Generate text using Groq.","icon":"Groq","base_classes":["object","str","Text"],"display_name":"Groq","documentation":"","custom_fields":{"groq_api_key":null,"model_name":null,"input_value":null,"groq_api_base":null,"max_tokens":null,"temperature":null,"n":null,"stream":null,"system_message":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":["groq_api_key","model","max_output_tokens","temperature","top_k","top_p","n","input_value","system_message","stream"],"beta":false},"id":"GroqModel-bUBCh"},"selected":false,"width":384,"height":587,"positionAbsolute":{"x":1557.5852825091665,"y":584.8478939528846},"dragging":false}],"edges":[{"source":"RecursiveCharacterTextSplitter-nsByy","target":"pgvector-lhbev","sourceHandle":"{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-nsByyœ}","targetHandle":"{œfieldNameœ:œinputsœ,œidœ:œpgvector-lhbevœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}","id":"reactflow__edge-RecursiveCharacterTextSplitter-nsByy{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-nsByyœ}-pgvector-lhbev{œfieldNameœ:œinputsœ,œidœ:œpgvector-lhbevœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}","data":{"targetHandle":{"fieldName":"inputs","id":"pgvector-lhbev","inputTypes":["Document","Record"],"type":"Record"},"sourceHandle":{"baseClasses":["Record"],"dataType":"RecursiveCharacterTextSplitter","id":"RecursiveCharacterTextSplitter-nsByy"}},"selected":false,"className":""},{"source":"pgvectorSearch-RsuoZ","target":"TextOutput-JDAXF","sourceHandle":"{œbaseClassesœ:[œRecordœ],œdataTypeœ:œpgvectorSearchœ,œidœ:œpgvectorSearch-RsuoZœ}","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-JDAXFœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}","id":"reactflow__edge-pgvectorSearch-RsuoZ{œbaseClassesœ:[œRecordœ],œdataTypeœ:œpgvectorSearchœ,œidœ:œpgvectorSearch-RsuoZœ}-TextOutput-JDAXF{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-JDAXFœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextOutput-JDAXF","inputTypes":["Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["Record"],"dataType":"pgvectorSearch","id":"pgvectorSearch-RsuoZ"}},"selected":false,"className":""},{"source":"TextOutput-JDAXF","target":"Prompt-wiGsr","sourceHandle":"{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-JDAXFœ}","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-wiGsrœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}","id":"reactflow__edge-TextOutput-JDAXF{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-JDAXFœ}-Prompt-wiGsr{œfieldNameœ:œcontextœ,œidœ:œPrompt-wiGsrœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"context","id":"Prompt-wiGsr","inputTypes":["Document","Message","Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"TextOutput","id":"TextOutput-JDAXF"}},"selected":false,"className":""},{"source":"ChatInput-IeuUX","target":"Prompt-wiGsr","sourceHandle":"{œbaseClassesœ:[œMessageœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-IeuUXœ}","targetHandle":"{œfieldNameœ:œquestionœ,œidœ:œPrompt-wiGsrœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}","id":"reactflow__edge-ChatInput-IeuUX{œbaseClassesœ:[œMessageœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-IeuUXœ}-Prompt-wiGsr{œfieldNameœ:œquestionœ,œidœ:œPrompt-wiGsrœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"question","id":"Prompt-wiGsr","inputTypes":["Document","Message","Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["Message","object","str","Text"],"dataType":"ChatInput","id":"ChatInput-IeuUX"}},"selected":false,"className":""},{"source":"ChatInput-IeuUX","target":"pgvectorSearch-RsuoZ","sourceHandle":"{œbaseClassesœ:[œMessageœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-IeuUXœ}","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œpgvectorSearch-RsuoZœ,œinputTypesœ:null,œtypeœ:œMessageœ}","id":"reactflow__edge-ChatInput-IeuUX{œbaseClassesœ:[œMessageœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-IeuUXœ}-pgvectorSearch-RsuoZ{œfieldNameœ:œinput_valueœ,œidœ:œpgvectorSearch-RsuoZœ,œinputTypesœ:null,œtypeœ:œMessageœ}","data":{"targetHandle":{"fieldName":"input_value","id":"pgvectorSearch-RsuoZ","inputTypes":null,"type":"Message"},"sourceHandle":{"baseClasses":["Message","object","str","Text"],"dataType":"ChatInput","id":"ChatInput-IeuUX"}},"selected":false,"className":""},{"source":"CustomComponent-UGPy7","sourceHandle":"{œbaseClassesœ:[œEmbeddingsœ,œFastEmbedEmbeddingsœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-UGPy7œ}","target":"pgvector-lhbev","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œpgvector-lhbevœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"pgvector-lhbev","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["Embeddings","FastEmbedEmbeddings"],"dataType":"CustomComponent","id":"CustomComponent-UGPy7"}},"id":"reactflow__edge-CustomComponent-UGPy7{œbaseClassesœ:[œEmbeddingsœ,œFastEmbedEmbeddingsœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-UGPy7œ}-pgvector-lhbev{œfieldNameœ:œembeddingœ,œidœ:œpgvector-lhbevœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","className":""},{"source":"File-lxT5W","sourceHandle":"{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-lxT5Wœ}","target":"RecursiveCharacterTextSplitter-nsByy","targetHandle":"{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-nsByyœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"inputs","id":"RecursiveCharacterTextSplitter-nsByy","inputTypes":["Document","Record"],"type":"Document"},"sourceHandle":{"baseClasses":["Record"],"dataType":"File","id":"File-lxT5W"}},"id":"reactflow__edge-File-lxT5W{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-lxT5Wœ}-RecursiveCharacterTextSplitter-nsByy{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-nsByyœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}","className":""},{"source":"CustomComponent-TXn1o","sourceHandle":"{œbaseClassesœ:[œEmbeddingsœ,œFastEmbedEmbeddingsœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-TXn1oœ}","target":"pgvectorSearch-RsuoZ","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œpgvectorSearch-RsuoZœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"pgvectorSearch-RsuoZ","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["Embeddings","FastEmbedEmbeddings"],"dataType":"CustomComponent","id":"CustomComponent-TXn1o"}},"id":"reactflow__edge-CustomComponent-TXn1o{œbaseClassesœ:[œEmbeddingsœ,œFastEmbedEmbeddingsœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-TXn1oœ}-pgvectorSearch-RsuoZ{œfieldNameœ:œembeddingœ,œidœ:œpgvectorSearch-RsuoZœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"},{"source":"Prompt-wiGsr","sourceHandle":"{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-wiGsrœ}","target":"GroqModel-bUBCh","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-bUBChœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"GroqModel-bUBCh","inputTypes":["Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"Prompt","id":"Prompt-wiGsr"}},"id":"reactflow__edge-Prompt-wiGsr{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-wiGsrœ}-GroqModel-bUBCh{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-bUBChœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"},{"source":"GroqModel-bUBCh","sourceHandle":"{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-bUBChœ}","target":"ChatOutput-4LUD2","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-4LUD2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-4LUD2","inputTypes":["Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"GroqModel","id":"GroqModel-bUBCh"}},"id":"reactflow__edge-GroqModel-bUBCh{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-bUBChœ}-ChatOutput-4LUD2{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-4LUD2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"}],"viewport":{"x":544.9658527654424,"y":-137.39636370603955,"zoom":0.3842451360338688}},"description":"RAG of an input file (UnstructuredMarkdown loader in case of markdown file). \nPGVector as the retrieval, Groq LLM.\nUseful for parsing markdown files ","name":"Markdown RAG, FastEmbed + Groq + PGVector","last_tested_version":"1.0.0a61","is_component":false}